@page "/userhistory"
@page "/userhistory/{Id}"
@using Services;
@using System.Timers;
@using System.Net.Http.Json;
@using Data;
@using System.Net;
@using System.Threading;
@inject AppDbContext db;
@inject HttpClient client
@inject NavigationManager navManager


<Trivia_App.Pages.Shared.LoginDisplay></Trivia_App.Pages.Shared.LoginDisplay>
<h1 style="background-color: seagreen; color: white; font-size: 2em; font-family: monospace; text-align: center;">@usersEmail's Game History</h1>


@if (gameSnapshots == null)
{
    <div style="position: relative; margin-left: auto; margin-right: auto; top:200px; height: 150px; width: 150px;">

        <h1 style="text-align: center;"> <span class="spinner-grow"></span>Loading..</h1>
    </div>
}
else if (gameSnapshots.Count < 1)
{
    <div style="position: relative; margin-left: auto; margin-right: auto; top:200px; height: 150px; width: 150px;">

        <h1 style="text-align: center;"> No games to show!</h1>
    </div>
}

else
{
    @foreach (var item in gameSnapshots.Where(p => p.UserID == Id).OrderByDescending(p => p.DatePlayed).ThenBy(p => p.TimePlayed))
    {

        questionNumber++;
        <div class="col-12" style="text-align: center; background-color: seagreen; color:whitesmoke; font-family: sans-serif; position:relative; top:50px;">

            <p style="border: 2px solid black; font-size: 2em; font-family:Papyrus;">Game @questionNumber </p>
            <p>Category: @item.GameCategory</p>
            <p>Difficulty: @item.GameDifficulty</p>
            <p>Score Percentage: @item.GameScorePercentage%</p>
            <p>Game Length: @item.GameLength</p>
            <p>Date Played: @item.DatePlayed</p>
            <p>Time Played: @item.TimePlayed</p>
            <p>Correct Answers: @item.CorrectAnswers</p>
            <p>Wrong Answers: @item.IncorrectAnswers</p>



        </div>


    }

}


@code {


    List<GameSnapshot> gameSnapshots;

    [Parameter]
    public string Id { get; set; }

    string usersEmail;

    DateTime myDate;


    int questionNumber;

    protected override void OnInitialized()
    {




        Id = Id;
        var Email = db.Users.Where(p => p.Id == Id).FirstOrDefault().Email;
        usersEmail = Email;
    }


    protected override async Task OnInitializedAsync()
    {
        gameSnapshots = await client.GetFromJsonAsync<List<GameSnapshot>>(" https://finaltriviamaniaapi.azure-api.net/v1/api/GameSnapshot");


    }
}



<style>

    p {
        font-family: Centaur;
    }
</style>